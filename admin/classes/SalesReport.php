<?php
require('../admin/fpdf186/fpdf.php');
require('../server/connection.php');

class SalesReport extends FPDF
{
    private $conn;
    private $data = [
        'Total Orders' => 0,
        'Total Revenue (LKR)' => 0.00,
        'Total Users' => 0,
        'Total Products' => 0
    ];
    private $deliveryData = [
        'Shipped Orders' => 0,
        'Not Paid Orders' => 0,
        'Delivered Orders' => 0
    ];
    private $generatedBy;

    public function __construct($conn, $generatedBy = 'Unknown')
    {
        parent::__construct();
        $this->conn = $conn;
        $this->generatedBy = $generatedBy;
    }

    function Header()
    {
        $this->SetFont('Arial', 'B', 16);
        $this->Cell(0, 10, 'Sales Report', 0, 1, 'C');
        $this->SetFont('Arial', 'I', 10);
        $this->Cell(0, 10, 'Generated on: ' . date('Y-m-d H:i:s'), 0, 1, 'L');
        $this->Cell(0, 10, 'Generated by: ' . $this->generatedBy, 0, 1, 'L');
        $this->Ln(5);
    }

    function Footer()
    {
        $this->SetY(-15);
        $this->SetFont('Arial', 'I', 8);
        $this->Cell(0, 10, 'Page ' . $this->PageNo(), 0, 0, 'C');
    }

    private function fetchData()
    {
        $queries = [
            'Total Orders' => "SELECT COUNT(*) FROM orders",
            'Total Revenue (LKR)' => "SELECT SUM(product_price) FROM order_items",
            'Total Users' => "SELECT COUNT(*) FROM users",
            'Total Products' => "SELECT COUNT(*) FROM products"
        ];

        foreach ($queries as $metric => $query) {
            $stmt = $this->conn->prepare($query);
            if ($stmt && $stmt->execute()) {
                $stmt->bind_result($this->data[$metric]);
                $stmt->fetch();
                $stmt->close();
            } else {
                $this->data[$metric] = 'Error';
            }
        }

        $deliveryQueries = [
            'Shipped Orders' => "SELECT COUNT(*) FROM orders WHERE order_status = 'Shipped'",
            'Not Paid Orders' => "SELECT COUNT(*) FROM orders WHERE order_status = 'not paid'",
            'Delivered Orders' => "SELECT COUNT(*) FROM orders WHERE order_status = 'Delivered'"
        ];


        foreach ($deliveryQueries as $metric => $query) {
            $stmt = $this->conn->prepare($query);
            if ($stmt && $stmt->execute()) {
                $stmt->bind_result($this->deliveryData[$metric]);
                $stmt->fetch();
                $stmt->close();
            } else {
                $this->deliveryData[$metric] = 'Error';
            }
        }
    }

    public function generateReport()
    {
        $this->fetchData();
        $this->AddPage();

        // Sales Metrics Table
        $this->SetFont('Arial', 'B', 12);
        $this->SetFillColor(230, 230, 230);
        $this->Cell(190, 10, 'Details', 1, 1, 'C', true);

        $this->SetFont('Arial', '', 12);
        foreach ($this->data as $metric => $value) {
            $this->Cell(95, 10, $metric, 1, 0, 'C');  // Center-align the metric
            $this->Cell(95, 10, $metric === 'Total Revenue (LKR)' ? number_format($value, 2) : number_format($value), 1, 1, 'C');  // Center-align the value
        }

        // Spacer between tables
        $this->Ln(10);

        // Delivery Details Table
        $this->SetFont('Arial', 'B', 12);
        $this->Cell(190, 10, 'Orders', 1, 1, 'C', true);

        $this->SetFont('Arial', '', 12);
        foreach ($this->deliveryData as $metric => $value) {
            $this->Cell(95, 10, $metric, 1, 0, 'C');  // Center-align the metric
            $this->Cell(95, 10, number_format($value), 1, 1, 'C');  // Center-align the value
        }


        $this->Output('D', 'Sales_Report.pdf');
    }
}

// Usage
$generatedBy = "Admin User";
$report = new SalesReport($conn, $generatedBy);
$report->generateReport();
